CHIP DisplayCounter201860153 {
    IN  inc,        // Increment signal: when high, the counter increments by 1
        reset;      // Reset signal: when high, the counter output resets to 0
    OUT a, b, c, d, e, f, g,  // Outputs to drive the 7-segment display
        count[4];   // 4-bit counter output (added to make bits accessible)

    PARTS:
    // Register: Stores the current count (16 bits, but only the low 4 bits are used)
    Register(in=regIn, out=regOut, load=load);

    // Inc16: Adds 1 to the 16-bit value (regOut)
    Inc16(in=regOut, out=incOut);

    // First Mux16: Chooses between "keeping the current value" (regOut) and "incremented value" (incOut)
    Mux16(a=regOut, b=incOut, sel=inc, out=incMuxOut);

    // Second Mux16: Chooses between the "normal next value" (incMuxOut) and "reset to 0" 
    Mux16(a=incMuxOut, b=false, sel=reset, out=regIn);

    // Load control: If either inc or reset is high, the register loads the new value
    Or(a=inc, b=reset, out=load);

    // Output the 4 bits we care about
    BUFFER(in=regOut[0], out=count[0]);
    BUFFER(in=regOut[1], out=count[1]);
    BUFFER(in=regOut[2], out=count[2]);
    BUFFER(in=regOut[3], out=count[3]);

    // 7-Segment Decoder: Maps the low 4 bits of the counter to outputs a-g
    Decoder201860153(
        D=count[3], 
        C=count[2], 
        B=count[1], 
        A=count[0], 
        a=a, b=b, c=c, d=d, e=e, f=f, g=g
    );
}





